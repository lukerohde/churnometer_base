#  Churnometer - A dashboard for exploring a membership organisations turn-over/churn
#  Copyright (C) 2012-2013 Lucas Rohde (freeChange) 
#  lukerohde@gmail.com
#
#  Churnometer is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Churnometer is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with Churnometer.  If not, see <http://www.gnu.org/licenses/>.

#!/bin/bash

DB_FILE="$2"
REPO="git@github.com:lukerohde/churnometer_base.git"
PRODUCTION_BRANCH="master"
DB_REPO="git@github.com:lukerohde/churnometer_data.git"

PG_PATH="/etc/postgresql/9.1/main"
CHURN_USER="churnometer"
CHURN_PASS="mypassword"
WWW_PATH="/opt/churnometer"

pwdir=$(pwd)

function confirm_config
{
  while [[ "$CONFIRMED" != "Y" && "$CONFIRMED" != "y" ]] ; do  
    echo "***********************************************************************"
    echo "* CONFIRM CONFIG"
    echo "*"
    echo "*"
    echo "***********************************************************************"
    echo "Database and application user: $CHURN_USER"
    echo "Database and application user's password: $CHURN_PASS"
    echo "Installation directory for application source: $WWW_PATH"
    echo "Directory of Postgres 9.1 configuration (will be overwritten!!!): $PG_PATH"
    echo "Source download repository: $REPO"
    echo "Branch in source download repository: $PRODUCTION_BRANCH"
    if [[ ! ${DB_FILE} ]] ; then 
      echo "You haven't specified a database backup file that exists.  Demo data download repository: $DB_REPO"
    else 
      echo "DB backup file to restore from: $DB_FILE"
    fi

    read -e -i "Y" -p "Is this configuration correct [Y/N]? " CONFIRMED
  
    if  [[ $CONFIRMED != "Y" && $CONFIRMED != "y" ]] ; then 
      read -e -i "$CHURN_USER" -p "Please enter a username for the database and webservice: " CHURN_USER
      read -e -i "$CHURN_PASS" -p "Please enter a password for user $CHURN_USER: " CHURN_PASS
      read -e -i "$WWW_PATH" -p "Please enter a path to install the application: " WWW_PATH
      read -e -i "$PG_PATH" -p "Please confirm the path to your postgres configuration (only tested with 9.1 and will overwrite!): " PG_PATH
      read -e -i "$REPO" -p "Please confirm the repository from which you to download the source: " REPO
      read -e -i "$PRODUCTION_BRANCH" -p "Please confirm the branch of $REPO: " PRODUCTION_BRANCH
      if [[ ! ${DB_FILE} ]] ; then 
        read -e -i "$DB_REPO" -p "Please confirm the repository from which to download the demo data: " DB_REPO
      fi
    fi
  done
}

function install
{
  echo "***********************************************************************"
  echo "* INSTALLING SOFTWARE DEPENDENCIES"
  echo "*"
  echo "*"
  echo "***********************************************************************"

  sudo apt-get update
  sudo apt-get -y install ruby1.9.1
  sudo apt-get -y install postgresql libpq-dev
  sudo apt-get -y install git
  sudo apt-get -y install ruby1.9.1-dev
  sudo apt-get -y install build-essential
  sudo apt-get -y install sendmail
  sudo apt-get -y install libxml2-dev libxslt-dev
  sudo apt-get -y install nginx 
  sudo apt-get -y install zip
}

function churn_user
{
  echo "***********************************************************************"
  echo "* CREATING USER"
  echo "*"
  echo "*"
  echo "***********************************************************************"
  
  sudo useradd -d /home/$CHURN_USER -m $CHURN_USER -p $CHURN_PASS  
  sudo usermod -s /bin/bash $CHURN_USER # set up bash shell

  sudo -u $CHURN_USER ssh-keygen -t rsa -b 4096 -f /home/$CHURN_USER/.ssh/id_rsa -N ""
  echo -e "\n\nCopy this key to https://github.com/account/ssh"
  echo -e "- To download the source you'll need to be a collaborator on $REPO (if it isn't public)"
  echo -e "- To download the demo data you'll need to be a collaborator on $DB_REPO (if it isn't public)"
  echo -e "\n"
  sudo -u $CHURN_USER cat /home/$CHURN_USER/.ssh/id_rsa.pub
  echo -e '\nPress enter once done'
  read
}


function source_config
{

  echo "***********************************************************************"
  echo "* INSTALLING SOURCE CODE"
  echo "*"
  echo "*"
  echo "***********************************************************************"
  
  sudo -u $CHURN_USER /etc/init.d/thin stop # stop thin before tmp/pids are deleted (in case of reinstall)
  sudo rm -Rf $WWW_PATH
  sudo mkdir $WWW_PATH
  sudo chown $CHURN_USER $WWW_PATH
 
  sudo -u $CHURN_USER rm /home/$CHURN_USER/www
  sudo -u $CHURN_USER ln -s $WWW_PATH /home/$CHURN_USER/www
  
  cd $WWW_PATH
  sudo -u $CHURN_USER git clone $REPO $WWW_PATH
  sudo -u $CHURN_USER git checkout $PRODUCTION_BRANCH

  sudo -u $CHURN_USER cp config/config_site.yaml.example config/config_site.yaml
  
  sudo -u $CHURN_USER bash -c " \
    sed \"s|REPLACEME_CHURN_USER|$CHURN_USER|g\" $WWW_PATH/config/config_site.yaml.example \
    | sed \"s|REPLACEME_CHURN_PASS|$CHURN_PASS|g\" \
    | sed \"s|REPLACEME_SOURCE_REPO|$REPO |g\" \
    > $WWW_PATH/config/config_site.yaml"

  sudo -u $CHURN_USER vim config/config_site.yaml
  sudo -u $CHURN_USER mkdir $WWW_PATH/uploads
  sudo -u $CHURN_USER mkdir $WWW_PATH/tmp
  sudo -u $CHURN_USER mkdir $WWW_PATH/log
  sudo -u $CHURN_USER mkdir $WWW_PATH/backup

  sudo git config --system user.email "$USER@$HOSTNAME"
  sudo git config --system user.name "$USER"
}

function db_config 
{
  echo "***********************************************************************"
  echo "* CONFIGURING POSTGRESQL DATABASE"
  echo "*"
  echo "*"
  echo "***********************************************************************"

  sudo bash -c "mv ${PG_PATH}/postgresql.conf ${PG_PATH}/postgresql.conf.bak"
  sudo bash -c "cp ${WWW_PATH}/config/postgresql.conf.91example ${PG_PATH}/postgresql.conf"
  sudo bash -c "echo -e '\n #Churnometer user for application access'  >> ${PG_PATH}/pg_hba.conf"
  sudo bash -c "echo -e 'local\tall\t\tchurnometer\t\t\t\tpeer' >> ${PG_PATH}/pg_hba.conf"
  
#http://www.postgresql.org/docs/8.2/static/kernel-resources.html
  sudo sysctl -w kernel.shmmax=671088640
  sudo sysctl -w kernel.shmall=10485760
  sudo bash -c "echo kernel.shmmax=671088640 | tee -a /etc/sysctl.conf"
  sudo bash -c "echo kernel.shmall=10485760 | tee -a /etc/sysctl.conf"
 
  sudo bash -c "echo PGDATESTYLE=european >> /etc/environment" #I'm not sure I want to keep this but it interprets dates as dd/mm/yyyy
  sudo /etc/init.d/postgresql restart
}

function db_import
{
  echo "***********************************************************************"
  echo "* IMPORTING DATA"
  echo "*"
  echo "*"
  echo "***********************************************************************"
  
  if [[ ! ${DB_FILE} ]] ; then 
    DB_FILE="/home/$CHURN_USER/churnometer_temp/sql/churnometer_base.sql"    
    if [[ ! -f ${DB_FILE} ]] ; then 
      sudo -u $CHURN_USER git clone $DB_REPO /home/$CHURN_USER/churnometer_temp/
    fi
  fi

  sudo -u postgres psql -c "create user churnuser with password '${CHURN_PASS}'"
  sudo -u postgres psql -c "create user ${CHURN_USER} with password '${CHURN_PASS}'"
  sudo -u postgres psql -c "drop database churnometer"
  sudo -u postgres psql -c "create database churnometer"
  cd $pwdir # incase a relative path was specified to database
  sudo -u postgres psql churnometer < $DB_FILE
  sudo -u postgres psql -c "grant churnuser to churnometer"
}

function ruby_config
{
  echo "***********************************************************************"
  echo "* INSTALLING GEMS"
  echo "*"
  echo "*"
  echo "***********************************************************************"
  
  cd $WWW_PATH
  sudo gem install bundler
  sudo bundle install
}

function daemonise
{
  echo "***********************************************************************"
  echo "* DAEMONISING CHURNOMETER"
  echo "*"
  echo "*"
  echo "***********************************************************************"
  
  #sed "s|REPLACEME_WWW_PATH|$WWW_PATH|g" $WWW_PATH/install/daemon \
  #| sed "s|REPLACEME_CHURN_USER|$CHURN_USER|g" > ~/daemon.tmp  

  #sudo mv ~/daemon.tmp /etc/init.d/churnometer
  #sudo chmod 755 /etc/init.d/churnometer

  #sudo update-rc.d -f churnometer remove
  #sudo update-rc.d churnometer defaults
  #sudo /etc/init.d/churnometer restart

  sudo thin install
  sudo update-rc.d -f thin defaults
  
  sed "s|REPLACEME_WWW_PATH|$WWW_PATH|g" \
    $WWW_PATH/config/thin_site.yml.example \
    > ~/thin.yml.tmp

  sudo mv ~/thin.yml.tmp /etc/thin/churnometer_production.yml
  
  sed "s|REPLACEME_WWW_PATH|$WWW_PATH|g" \
    $WWW_PATH/config/nginx_site.conf.example \
    > ~/nginx.conf.tmp  
  
  sudo mv ~/nginx.conf.tmp /etc/nginx/sites-available/churnometer_production.conf
  sudo ln -s /etc/nginx/sites-available/churnometer_production.conf \
    /etc/nginx/sites-enabled/churnometer_production.conf
 
  sudo -u $CHURN_USER /etc/init.d/thin restart
  sudo /etc/init.d/nginx restart
}

case $1 in 
  just-software)
    confirm_config
    install
  ;;
  just-user)
    confirm_config
    churn_user
  ;;
  just-source)
    confirm_config
    source_config
  ;;
  just-dbconfig)
    confirm_config
    db_config
  ;;
  just-data)
    confirm_config
    db_import
  ;;
  just-gems)
    confirm_config
    ruby_config
  ;;
  just-daemonise)
    confirm_config
    daemonise
  ;;
  install)
    confirm_config
    churn_user
    install
    source_config
    db_config
    db_import
    ruby_config
    daemonise
  ;;
  *)
    echo >&2 "Usage: $0 < install | just-software | just-user | just-source | just-dbconfig | just-data | just-gems | just-daemonise > [db backup file]"
    exit 1
    ;;
esac

